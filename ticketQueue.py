# программа, "продающая" билеты людям в очереди
# количество проданных билетов зависит от переданных параметров и случайного значения

import time
import random

class Queue:
    def __init__(self): 
        self.items = []

    def is_empty(self): # проверяем, является ли очередь пустой
        return self.items == []

    def enqueue(self, item): # добавляем элемент в очередь (каждый новый элемент на 0 позицию)
        self.items.insert(0, item)

    def dequeue(self): # удаляем последний элемент очереди и возвращаем его
        return self.items.pop()

    def size(self): # узнаём длину очереди
        return len(self.items)

    def simulate_line(self, till_show, max_time): # функция моделирует продажу билетов людям в очереди (till_show - целое кол-во секунд, оставшихся до фильма; max_time - макс. кол-во секунд, уходящее на покупку билета одним человеком)

        tickets_sold = [] # создаём пустой список, который будет отслеживать людей, купивших билет
        
        for i in range(100):
            self.enqueue("Кинозритель " + str(i)) # заполняем очередь

        t_end = time.time() + till_show # сколько осталось времени до начала фильма
        now = time.time() # время на данный момент

        while now < t_end and not self.is_empty(): # пока не начнётся фильм и пока очередь не пустая
            now = time.time()
            r = random.randint(0, max_time) # задаём случайное количество секунд на обслуживание одного кинозрителя
            time.sleep(r) # вызываем функцию sleep, чтобы, пока кинозритель "покупает билет", интерпретатор Python ничего не делал
            person = self.dequeue() # извлекаем из очереди кинозрителя, купившего билет
            tickets_sold.append(person) # добавляем кинозрителя в список

        return tickets_sold # возвращаем список кинозрителей, купивших билет


queue = Queue() # создаём очередь
sold = queue.simulate_line(12, 3) # вызываем функцию, передавая в нее два параметра: время, оставшееся до начала фильма, и макс. время на обслуживание одного кинозрителя)
print(sold) # выводим результат работы функции на экран
